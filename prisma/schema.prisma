// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Baby {
  id                      String   @id @default(cuid())
  name                    String
  birthDate               DateTime
  birthTime               String?
  gender                  String   // 'boy' or 'girl'
  birthWeight             Float?
  birthHeight             Float?
  birthHeadCircumference  Float?
  bloodType               String?
  allergies               String?
  notes                   String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  growthRecords   GrowthRecord[]
  milestones      Milestone[]
  photos          Photo[]
  diaryEntries    DiaryEntry[]

  @@map("babies")
}

model GrowthRecord {
  id                  String   @id @default(cuid())
  babyId              String
  date                DateTime
  weight              Float?
  height              Float?
  headCircumference   Float?
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  baby                Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)

  @@map("growth_records")
  @@index([babyId, date])
}

model Milestone {
  id          String   @id @default(cuid())
  babyId      String
  date        DateTime
  title       String
  description String
  category    String   // 'motor', 'language', 'social', 'cognitive', 'self_care'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  baby        Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)

  @@map("milestones")
  @@index([babyId, date])
}

model Photo {
  id          String   @id @default(cuid())
  babyId      String
  date        DateTime
  title       String
  description String?
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  baby        Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)

  @@map("photos")
  @@index([babyId, date])
}

model DiaryEntry {
  id        String   @id @default(cuid())
  babyId    String
  date      DateTime
  title     String
  content   String
  mood      String   // 'happy', 'excited', 'proud', 'tired', 'worried', 'peaceful'
  weather   String?  // 'sunny', 'cloudy', 'rainy', 'snowy'
  tags      String[] // Array of tag strings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  baby      Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)

  @@map("diary_entries")
  @@index([babyId, date])
}
